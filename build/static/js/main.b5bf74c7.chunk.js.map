{"version":3,"sources":["Components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","id","todo","type","onClick","e","setCheckProp","target","defaultChecked","isChecked","descrp","removeTodoProp","parentNode","todosList","JSON","parse","localStorage","getItem","App","updateTodosView","setTodos","map","item","key","removeTodo","setCheck","useState","todos","addNewTodo","document","querySelector","value","length","push","updateStorageTodosList","elem","updatedTodosList","filter","i","checked","setItem","stringify","addEventListener","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAsBeA,MApBf,SAAkBC,GASd,OACI,yBAAKC,UAAU,YAAYC,GAAIF,EAAMG,KAAKD,IACtC,6BACA,2BAAOE,KAAK,WAAWH,UAAU,gBAAgBI,QAPzD,SAAwBC,GACpBN,EAAMO,aAAaD,EAAEE,SAMyDC,eAAgBT,EAAMG,KAAKO,YACrG,uBAAGT,UAAU,eAAeD,EAAMG,KAAKQ,SAEvC,4BAAQV,UAAU,aAAaI,QAdvC,SAA0BC,GACtBN,EAAMY,eAAeN,EAAEE,OAAOK,cAa1B,OCZRC,EAAY,CACd,CAACH,OAAQ,MAAOT,GAAI,EAAGQ,WAAW,GAClC,CAACC,OAAQ,QAAST,GAAI,EAAGQ,WAAW,GACpC,CAACC,OAAQ,OAAQT,GAAI,EAAGQ,WAAW,IAGjCK,KAAKC,MAAMC,aAAaC,QAAQ,uBAClCJ,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,sBA6E/BC,MA1Ef,WACE,SAASC,IACPC,EAASP,EAAUQ,KAAI,SAAAC,GAAI,OAC3B,kBAAC,EAAD,CACEpB,KAAMoB,EACNC,IAAKD,EAAKrB,GACVU,eAAgBa,EAChBlB,aAAcmB,QAPL,MAWaC,mBAASb,EAAUQ,KAAI,SAAAC,GAAI,OACrD,kBAAC,EAAD,CACIpB,KAAMoB,EACNC,IAAKD,EAAKrB,GACVU,eAAgBa,EAChBlB,aAAcmB,QAhBL,mBAWNE,EAXM,KAWCP,EAXD,KAmBb,SAASQ,IACP,IAAMlB,EAASmB,SAASC,cAAc,kBAAkBC,MACxDF,SAASC,cAAc,kBAAkBC,MAAQ,GACjD,IAAM9B,EAAKY,EAAUmB,OAASnB,EAAUA,EAAUmB,OAAS,GAAG/B,GAAK,EAAI,EACnES,GACFG,EAAUoB,KAAK,CAACvB,SAAQT,KAAIQ,WAAW,IAEzCyB,IACAf,IAGF,SAASK,EAAWW,GAClB,IAAMC,EAAmBvB,EAAUwB,QAAO,SAAAf,GAAI,OAAIA,EAAKrB,MAAQkC,EAAKlC,MACpEY,EAAYuB,EACZF,IACAf,IAGF,SAASM,EAASU,GAChB,IAAK,IAAIG,EAAI,EAAGA,EAAIzB,EAAUmB,OAAQM,IACpC,IAAKzB,EAAUyB,GAAGrC,MAAQkC,EAAKvB,WAAWA,WAAWX,GAAI,CACvDY,EAAUyB,GAAG7B,UAAY0B,EAAKI,QAC9B,MAIJL,IACAf,IAGF,SAASe,IACPlB,aAAawB,QAAQ,mBAAoB1B,KAAK2B,UAAU5B,IAU1D,OAPAgB,SAASa,iBAAiB,YAAY,SAASrC,GAC/B,UAAVA,EAAEkB,KACJK,OAMF,yBAAK5B,UAAU,OACb,oDACA,yBAAKA,UAAU,YACb,2BAAOG,KAAK,OAAOwC,YAAY,iBAAiB1C,GAAG,kBACnD,4BAAQA,GAAG,eAAeG,QAASwB,GAAnC,aAEF,yBAAK5B,UAAU,aACZ2B,KCvEWiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b5bf74c7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TodoItem(props) {\r\n    function handleRemoveTodo(e) {\r\n        props.removeTodoProp(e.target.parentNode);\r\n    }\r\n\r\n    function handleSetCheck(e) {\r\n        props.setCheckProp(e.target);\r\n    }\r\n\r\n    return(\r\n        <div className=\"todo-item\" id={props.todo.id}>\r\n            <div>\r\n            <input type=\"checkbox\" className=\"todo-checkbox\" onClick={handleSetCheck} defaultChecked={props.todo.isChecked}/>\r\n            <p className=\"todo-descrp\">{props.todo.descrp}</p>\r\n            </div>\r\n            <button className=\"remove-btn\" onClick={handleRemoveTodo}>X</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;","import React, { useState } from 'react';\nimport './App.css';\n\nimport TodoItem from './Components/TodoItem';\n\nlet todosList = [\n  {descrp: 'Eat', id: 1, isChecked: false},\n  {descrp: 'Sleep', id: 2, isChecked: false},\n  {descrp: 'Code', id: 3, isChecked: false}\n  ];\n\nif (JSON.parse(localStorage.getItem('storageTodosList'))) {\n  todosList = JSON.parse(localStorage.getItem('storageTodosList'));\n}\n\nfunction App() {\n  function updateTodosView() {\n    setTodos(todosList.map(item =>\n    <TodoItem\n      todo={item}\n      key={item.id}\n      removeTodoProp={removeTodo}\n      setCheckProp={setCheck}\n    />));\n  };\n\n  const [todos, setTodos] = useState(todosList.map(item =>\n  <TodoItem\n      todo={item}\n      key={item.id}\n      removeTodoProp={removeTodo}\n      setCheckProp={setCheck}\n    />));\n\n  function addNewTodo() {\n    const descrp = document.querySelector('#new-todo-text').value;\n    document.querySelector('#new-todo-text').value = '';\n    const id = todosList.length ? todosList[todosList.length - 1].id + 1 : 1;\n    if (descrp) {\n      todosList.push({descrp, id, isChecked: false});\n    }\n    updateStorageTodosList()\n    updateTodosView();\n  };\n\n  function removeTodo(elem) {\n    const updatedTodosList = todosList.filter(item => item.id !== +elem.id);\n    todosList = updatedTodosList;\n    updateStorageTodosList()\n    updateTodosView();\n  };\n\n  function setCheck(elem) {\n    for (let i = 0; i < todosList.length; i++) {\n      if (+todosList[i].id === +elem.parentNode.parentNode.id) {\n        todosList[i].isChecked = elem.checked;\n        break;\n      }\n      \n    }\n    updateStorageTodosList()\n    updateTodosView();\n  }\n\n  function updateStorageTodosList() {\n    localStorage.setItem('storageTodosList', JSON.stringify(todosList));\n  }\n\n  document.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      addNewTodo();\n    }\n  });\n  \n  \n  return (\n    <div className=\"app\">\n      <h1>My Todo App on React</h1>\n      <div className=\"add-todo\">\n        <input type=\"text\" placeholder=\"Insert text...\" id=\"new-todo-text\"/>\n        <button id=\"add-todo-btn\" onClick={addNewTodo}>Add Todo</button>\n      </div>\n      <div className=\"todo-list\">\n        {todos}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}